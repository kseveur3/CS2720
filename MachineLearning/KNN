import Jama.Matrix;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;
import java.io.*;


public class KNN {

    public Matrix cleanMatrix;
    public Matrix originalData;
    public String labelLocation;
    public int kValue;
    int[] weightRow;
    double[] columWeight;
    public String dataSet;
    public String originalTestDataSet;
    public String outputFileName;
    int testDataRows;



    public KNN(String dataSetIn, String outputLocation, int k) {

        dataSet = dataSetIn;
        outputFileName = outputLocation;
        kValue = k;
        readDataFile(dataSet,1);
    }

    public KNN(String trainData, String outputLocation, String testData, String labels, int k, int testDataRowCount) {

        //dataSet = trainData;
        outputFileName = outputLocation;
        kValue = k;
        labelLocation = labels;
        testDataRows = testDataRowCount;
        //originalTestDataSet = testData;
        compileData(trainData,testData);
        dataSet = "Data/mergedFiles.txt";
        readDataFile(dataSet,0);
        labelsToTrainData();
        process();
        printResultsOnly();
    }

    public void readDataFile(String myData, int option) {

        try {
            BufferedReader reader = new BufferedReader(new FileReader(myData));
            List<double[]> dataArray = new ArrayList<double[]>();
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                line = line.replaceAll(",", " ");
                line = line.replaceAll("\\s+", ",");
                String fields[] = line.split(",");

                double data[] = new double[fields.length];

                for (int i = 0; i < fields.length; ++i) {
                    if (!fields[i].contains(" ")) {
                        data[i] = Double.valueOf(fields[i]);
                    }
                }
                dataArray.add(data);


                if (dataArray.size() > 0) {
                    int cols = dataArray.get(0).length;
                    int rows = dataArray.size();
                    Matrix myMatrix = new Matrix(rows, cols);

                    for (int r = 0; r < rows; r++) {
                        for (int c = 0; c < cols; c++) {
                            myMatrix.set(r, c, dataArray.get(r)[c]);
                        }

                    }

                    originalData = myMatrix;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }

        if(option == 1) {
            process();
        }

       /* double[][] valsTransposed = originalData.getArray();
        for (int i = 0; i < valsTransposed.length; i++) {
            for (int j = 0; j < valsTransposed[i].length; j++) {
                System.out.print(valsTransposed[i][j]);
                if (j < valsTransposed[i].length - 2) {
                    System.out.print(", ");
                }
            }
            System.out.println();

        }*/

        //saveData();
    }


    public void process() {
            int rows = originalData.getRowDimension();
            int cols = originalData.getColumnDimension();
            if (kValue > rows) {
                System.out.println("ERROR: your K value cannot be larger than your Row Count!!");
                System.exit(1);
            }
            //kValue = k;

            for (int r = 0; r < rows; r++) {
                for (int c = 0; c < cols; c++) {
                    if ((originalData.get(r, c)) > 1000) {
                        //System.out.println("Row: " + r+ " Column: " + c);
                        //System.out.println("Cell Data: " + originalData.get(r, c));

                        originalData.set(r, c, findMissingData(r, c));
                    }
                }
            }
            saveData();
        }


    public double findMissingData(int row, int column) {
        //List<double[]> neighbors = new ArrayList<double[]>();
        createCleanData();

        int rowCount = cleanMatrix.getRowDimension();
        int columnCount = cleanMatrix.getColumnDimension();
        double estimation = 0;
        //List<Double> instanceTotals = new ArrayList<>();
        Map<Integer, Double> instanceTotals = new HashMap<Integer, Double>();
        //Map<Integer, Double> instanceTotalsSorted = new HashMap<Integer, Double>();


        for (int r = 0; r < rowCount; r++) {
            double rowTotal = 0.00;
            for (int c = 0; c < columnCount; c++) {
                if (c != column) {

                    double z = originalData.get(row, c) - cleanMatrix.get(r, c);
                    rowTotal += Math.sqrt((z * z));
                }
            }
            instanceTotals.put(r, rowTotal);
        }

        knnMath(sortByValue(instanceTotals));
        for(int idx = 0; idx < weightRow.length; idx++) {
            estimation += Math.round(cleanMatrix.get(weightRow[idx], column) * columWeight[idx] * 1000.0) / 1000.0;
        }
        return estimation;
    }

    private void knnMath(Map<Integer, Double> data) {

        int kLimit = kValue;
        //List<double[]> weights = new ArrayList<double[]>();
        double[] distance = new double[kValue];
        weightRow = new int[kValue];

        double denominator = 0;
        columWeight = new double[kValue];

        for (Map.Entry<Integer, Double> entry : data.entrySet()) {
            //double data1[] = new double[kValue];
            if (kLimit > 0) {
                weightRow[kLimit-1] = entry.getKey();
                distance[kLimit-1] = 1/entry.getValue();
                denominator += 1/entry.getValue();
                kLimit--;
            }
        }
        for (int idx = 0; idx < distance.length; idx++) {
            columWeight[idx] = distance[idx] / denominator;
        }
    }


    /**
     * Takes the original data set and removes all instances that have missing data
     */
    private void createCleanData() {
        List<double[]> neighbors = new ArrayList<double[]>();
        int rowCount = originalData.getRowDimension();
        int columnCount = originalData.getColumnDimension();


        for (int r = 0; r < rowCount; r++) {
            double data[] = new double[columnCount];
            int skip = -1;
            for (int c = 0; c < columnCount; c++) {
                if (originalData.get(r, c) > 1000) {
                    //System.out.println("Row: " + r +" Column: " + columnCount);
                   // System.out.println("What is the value here: " + originalData.get(r, c));
                    skip = 1;
                } else {
                    data[c] = originalData.get(r, c);
                }
            }
            if (skip == -1) {
                neighbors.add(data);
            }
        }

        cleanMatrix = new Matrix(neighbors.size(), neighbors.get(0).length);
        for (int r = 0; r < neighbors.size(); r++) {
            for (int c = 0; c < neighbors.get(0).length; c++) {
                cleanMatrix.set(r, c, neighbors.get(r)[c]);
            }
        }
    }



    private static Map<Integer, Double> sortByValue(Map<Integer, Double> unsortedMap) {

        // Convert Map to List of Map
        List<Map.Entry<Integer, Double>> list = new LinkedList<Map.Entry<Integer, Double>>(unsortedMap.entrySet());


        // Sort list with Collections.sort(), provide a custom Comparator
        //    Try switch the o1 o2 position for a different order
        Collections.sort(list, new Comparator<Map.Entry<Integer, Double>>() {
            public int compare(Map.Entry<Integer, Double> o1,
                               Map.Entry<Integer, Double> o2) {
                return (o1.getValue()).compareTo(o2.getValue());
            }
        });

        // Loop the sorted list and put it into a new insertion order Map LinkedHashMap
        Map<Integer, Double> sortedMap = new LinkedHashMap<Integer, Double>();
        for (Map.Entry<Integer, Double> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }

        /*
        //classic iterator example
        for (Iterator<Map.Entry<String, Integer>> it = list.iterator(); it.hasNext(); ) {
            Map.Entry<String, Integer> entry = it.next();
            sortedMap.put(entry.getKey(), entry.getValue());
        }*/

        return sortedMap;
    }

    private void eraseOldFile() {

        try {
            PrintWriter writer = new PrintWriter(outputFileName);
            writer.print("");
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

   private void saveData() {
       eraseOldFile();

        try {
            FileWriter fw = new FileWriter(outputFileName,true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            //PrintWriter out = new PrintWriter(outputFileName, true);

            //System.out.println(Arrays.deepToString(originalData.getArray()));

            for(int r = 0; r < originalData.getRowDimension(); r++) {
                for(int c = 0; c < originalData.getColumnDimension(); c++) {
                    //System.out.print(originalData.get(r,c));
                    pw.print(originalData.get(r,c));
                    if (c < originalData.getColumnDimension() - 1) {
                        //System.out.print(", ");
                        pw.print(", ");
                    }

            }

            /*double[][] valsTransposed = originalData.getArray();
            for (int i = 0; i < valsTransposed.length; i++) {
                for (int j = 0; j < valsTransposed[i].length; j++) {
                    System.out.print(valsTransposed[i][j]);
                    pw.print(valsTransposed[i][j]);
                    if (j < valsTransposed[i].length - 2) {
                        System.out.print(", ");
                        pw.print(", ");
                    }
                }*/
                pw.println("");
                //System.out.println();

            }
            pw.close();

        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
       }

   }

   public String getOutputFile() {
        return outputFileName;
   }

    /**
     * Compiles the train data with the test data to perform more accurate KNN on test data
     * @param trainData
     * @param testData
     */

   public static void compileData(String trainData, String testData) {

       String sourceFile1Path = trainData;
       String sourceFile2Path = testData;

       String mergedFilePath = "Data/mergedFiles.txt";

       File[] files = new File[2];
       files[0] = new File(sourceFile1Path);
       files[1] = new File(sourceFile2Path);

       File mergedFile = new File(mergedFilePath);

       MergeFiles.mergeFiles(files, mergedFile);


   }

    /**
     * This method adds the labels to the training dataset
     */

   private void labelsToTrainData() {
       try {
           BufferedReader reader = new BufferedReader(new FileReader(labelLocation));
           List<double[]> dataArray = new ArrayList<double[]>();
           String line;
           Matrix myMatrix = new Matrix(originalData.getRowDimension(), originalData.getColumnDimension()+1);

           while ((line = reader.readLine()) != null) {
               line = line.trim();
               line = line.replaceAll("\\s+", ",");
               String fields[] = line.split(",");
               System.out.println("Line: " + line);


               double data[] = new double[fields.length];

               for (int i = 0; i < fields.length; i++) {
                   if (!fields[i].contains(" ")) {
                       System.out.println("Value of Fields " + i + " = " + fields[i]);
                       data[i] = Double.valueOf(fields[i]);
                   }
               }
               dataArray.add(data);

           }
           System.out.println("Labels Row Count: " + dataArray.size());


               if (dataArray.size() > 0) {
                   int rows = myMatrix.getRowDimension();
                   int cols = myMatrix.getColumnDimension();
                   System.out.println("RowCount: " + rows + " ColumnCount: " + cols);


                   for (int r = 0; r < rows; r++) {
                       for (int c = 0; c < cols; c++) {
                           //System.out.println("What is C: " + c);
                           if (c == (cols - 1) && r < dataArray.size()) {
                               myMatrix.set(r, c, dataArray.get(r)[0]);
                           } else if (c == (cols - 1)) {
                               myMatrix.set(r, c, 10000);
                           } else {
                               myMatrix.set(r, c, originalData.get(r,c));
                           }
                       }
                   }
                   originalData = myMatrix;
               }

       } catch (Exception e) {
           e.printStackTrace();
           System.exit(1);
       }
       saveData();

   }

    /**
     * Method to print KNN results as text in a file that contains only the results
     */

   private void printResultsOnly() {
       readDataFile(outputFileName, 0);

       int rows = originalData.getRowDimension();
       int cols = originalData.getColumnDimension();
       int limiter = rows - testDataRows;
       System.out.println("Limiter = " + limiter);

       List<Double> answers = new ArrayList<Double>();

       System.out.println("Test Set Rows: " + rows + " Columns: " + cols);


       for (int r = limiter; r < rows; r++) {
           double temp = 0;
           for (int c = 0; c < cols; c++) {
               if(c == cols -1) {
                   temp = originalData.get(r,c);
               }
           }
           answers.add(temp);
       }

       LinearRegressionML.saveData(answers);


   }


    public static void main(String[] args) {
        KNN knn = new KNN("Data/TrainData4.txt", "Data/temp.txt", "Data/TestData4.txt", "Data/TrainLabel4.txt",2, 1092);
    }

    }



