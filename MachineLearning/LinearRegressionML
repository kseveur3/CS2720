

import java.io.*;
import java.util.*;

import Jama.Matrix;
import java.util.Scanner;


/**
 * This class inputs a text file of training data, subdivides that data to create a test set,
 * then runs linear regression on the data to determine classification of attributes.
 * @author Kevin Seveur ID# 002206515
 *
 * 3/25/2018
 *
 */

public class LinearRegressionML {
    public String dataFile;
    public String labelFile;
    public String testingFile;
    public Matrix trainingMartrix;
    public Matrix testingMatrix;
    public Matrix trainingLabelMatrix;
    public Matrix testingLabelMatrix;
    public int rowLimiter;
    public Double lambda;
    public Matrix dataSetWeights;
    public int doImpute;

    public LinearRegressionML(String originalData, String originalLabels, String testData, int impute) {
        lambda = 1.0;
        dataFile = originalData;
        labelFile = originalLabels;
        testingFile = testData;
        doImpute = impute;

    }

    /**
     * This method inputs a text file of values and creates a train matrix and a test matrix from text file.
     * The division is 80 / 20 percent for training to testing data
     */

    public List<double[]> readData(String dataToRead) {
        List<double[]> dataArray = new ArrayList<double[]>();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(dataToRead));

            String line;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                line = line.replaceAll(",", " ");
                line = line.replaceAll("\\s+", ",");
                String fields[] = line.split(",");

                double data[] = new double[fields.length];
                //colCount = new int[fields.length];
                for (int i = 0; i < fields.length; ++i) {
                    if (!fields[i].contains(" ")) {
                        data[i] = Double.valueOf(fields[i]);
                    }
                }
                dataArray.add(data);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
        return dataArray;
    }

    private void dataDivider(List<double[]> dataArray) {
        if (dataArray.size() > 0) {
            int cols = dataArray.get(0).length;
            int rows = dataArray.size();
            rowLimiter = (int) (rows * .8);

            System.out.println("Rows: " + rows + " Columns: " + cols);

            trainingMartrix = new Matrix(rowLimiter, cols);
            testingMatrix = new Matrix(rows - rowLimiter, cols);

            for (int r = 0; r < rows; r++) {
                if (r < rowLimiter) {
                    for (int c = 0; c < cols; c++) {
                        trainingMartrix.set(r, c, dataArray.get(r)[c]);
                    }
                } else {
                    for (int c = 0; c < cols; c++) {
                        testingMatrix.set((r - rowLimiter), c, dataArray.get(r)[c]);
                    }
                }
            }
            if(doImpute == 1) {
                trainingMartrix = impute(trainingMartrix);
                testingMatrix = impute(testingMatrix);
            }
        }

        System.out.println("Training Matrix size: " + trainingMartrix.getRowDimension() + " X " + trainingMartrix.getColumnDimension());
        System.out.println("Testing Matrix size: " + testingMatrix.getRowDimension() + " X " + testingMatrix.getColumnDimension());
    }

    public Matrix impute(Matrix m) {
        int rows = m.getRowDimension();
        int cols = m.getColumnDimension();
        double data[] = new double[cols];
        double sum = 0;

        for (int c = 0; c < cols; c++) {
            sum = 0;
            int counter = 0;
            for (int r = 0; r < rows; r++) {
                if (m.get(r, c) < 100) {
                    sum += m.get(r, c);
                    counter++;
                }
            }
            data[c] = sum / counter;
        }

        for (int c = 0; c < cols; c++) {
            for (int r = 0; r < rows; r++) {
                if (m.get(r, c) > 100) {
                    m.set(r, c, data[c]);
                }
            }
        }

        return m;

    }



    /**
     * This method adds a bias term of 1 to the first column of our data set
     *
     * @param dataSet
     */

    private Matrix biasInsertion(Matrix dataSet) {
        Matrix features = dataSet.getMatrix(0, dataSet.getRowDimension() - 1, 0, dataSet.getColumnDimension() - 1);
        int rows = features.getRowDimension();
        int cols = features.getColumnDimension() + 1;
        Matrix modifiedFeatures = new Matrix(rows, cols);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (c == 0) {
                    modifiedFeatures.set(r, c, 1.0);
                } else {
                    modifiedFeatures.set(r, c, features.get(r, c - 1));
                }
            }
        }
        return modifiedFeatures;
    }

    private void getLabels() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(labelFile));
            List<double[]> dataArray = new ArrayList<double[]>();
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.replaceAll("(?m)^\\s", "");
                if(!line.equals("")) {
                    String fields[] = line.split("//s+");
                    double data[] = new double[fields.length];
                    for (int i = 0; i < fields.length; ++i) {
                            data[i] = Double.parseDouble(fields[i]);
                    }
                    dataArray.add(data);
                }
            }

            int cols = dataArray.get(0).length;
            int rows = dataArray.size();

            System.out.println("Label Data Rows: " + rows + " Columns: " + cols);
            trainingLabelMatrix = new Matrix(rowLimiter, cols);
            testingLabelMatrix = new Matrix(rows - rowLimiter, cols);

            for (int r = 0; r < rows; r++) {
                if (r < rowLimiter) {
                    for (int c = 0; c < cols; c++) {
                        trainingLabelMatrix.set(r, c, dataArray.get(r)[c]);
                    }
                } else {
                    for (int c = 0; c < cols; c++) {
                        testingLabelMatrix.set((r - rowLimiter), c, dataArray.get(r)[c]);
                    }
                }
            }
        } catch(Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    /**
     *
     * @param data is the n x m matrix
     * @param labels is the n x 1 label data for the given matrix
     * @return weights in the form of 1 x m
     */

    private Matrix trainLinearRegressionModel(Matrix data, Matrix labels) {
        int row = data.getRowDimension();
        int column = data.getColumnDimension();
        Matrix identity = Matrix.identity(column, column);
        identity.times(lambda);
        Matrix dataCopy = data.copy();
        Matrix transposeData = dataCopy.transpose(); //We transpose the input matrix, swapping cols and rows to make vector math easier
        Matrix norm = transposeData.times(data); //Here we “normalize” our input data to ensure all values are within the same range
        Matrix circular = norm.plus(identity);
        Matrix circularInverse = circular.inverse();
        Matrix former = circularInverse.times(data.transpose());
        Matrix weight = former.times(labels);

        dataSetWeights = weight;

        return weight;
    }

    private double evaluateModel(Matrix data, Matrix labels, Matrix weights) {
        double error = 0.0;

        int row = data.getRowDimension();
        int col = data.getColumnDimension();

        if(!(row == labels.getRowDimension() && col == weights.getRowDimension())) {
            System.out.println("ERROR!!  Label Matrix / Weight Matrix mismatch");
            System.exit(1);
        }

        Matrix predictLabels = prediction(data, weights);
        for (int i = 0; i < row; i++) {
            error = (labels.get(i, 0) - predictLabels.get(i, 0)) * (labels.get(i, 0) - predictLabels.get(i, 0));
        }

        //Error = .5 * (Sum of label - (attribute * predicted weight for each attribute))
        return 0.5 * error;

    }

    private Matrix prediction(Matrix data, Matrix weights) {
        int row = data.getRowDimension();
        Matrix predictLabels = new Matrix(row,1);

        for (int i = 0; i < row; i++) {
            double value = mult(data.getMatrix(i, i, 0, data.getColumnDimension() -1 ), weights);
            predictLabels.set(i, 0, value);
        }
        return predictLabels;
    }


    /**
     * Multiplies 2 matrix together column by column from a row
     * @param data Matrix data
     * @param weights The established weights to multliply each column bu
     * @return
     */
    private Double mult(Matrix data, Matrix weights) {
        Double sum = 0.0;
        int col = data.getColumnDimension();
        for(int i = 0; i < col; i++) {
            sum += data.get(0, i) * weights.get(i, 0);
        }
        return sum;
    }

    private void applyPredictions() {
        List<double[]> testSet = new ArrayList<double[]>();
        Matrix testWeights = dataSetWeights;
        testSet = readData(testingFile);

        int testrows = testSet.size();
        int testcols = testSet.get(0).length;
        Matrix testSetMatrixtemp = new Matrix(testrows,testcols );

        for (int r = 0; r < testrows; r++) {
            for (int c = 0; c < testcols; c++) {
                testSetMatrixtemp.set(r, c, testSet.get(r)[c]);
            }
        }
        Matrix testSetMatrix = biasInsertion(testSetMatrixtemp);


        List<Double> predictions = new ArrayList<Double>();

        int cols = testSetMatrix.getColumnDimension();
        int rows = testSetMatrix.getRowDimension();

        System.out.println("Test Set Rows: " + rows + " Columns: " + cols);

        for (int r = 0; r < rows; r++) {
            double temp = 0;
            for (int c = 0; c < cols; c++) {
                temp += Math.round(testWeights.get(c, 0) * testSetMatrix.get(r, c) * 100.0) / 100.0;
            }
            predictions.add(temp);
        }
        saveData(predictions);
    }

    public static void eraseOldFile() {

        try {
            PrintWriter writer = new PrintWriter("Data/Answers.txt");
            writer.print("");
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public static void saveData(List<Double> predictionsToPrint) {
        eraseOldFile();

        try {
            FileWriter fw = new FileWriter("Data/Answers.txt",true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);

            for(int r = 0; r < predictionsToPrint.size(); r++) {
                pw.println(round(predictionsToPrint.get(r),0));
            }
            pw.close();

        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }

        }

    public static double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        long factor = (long) Math.pow(10, places);
        value = value * factor;
        long tmp = Math.round(value);
        return (double) tmp / factor;

    }




    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        String cleanedData = "";
        int imputerRequest = 0;
        System.out.println("Please select which would you like to do:" +
                "\n1)           Classification (Option 1)" +
                "\n2)           Missing Data Valuation (Option 2)");
        int f = reader.nextInt();
        if( f != 1 && f != 2) {
            System.out.println(" You must select a 1 or a 2!!");
            System.exit(1);
        }
        System.out.println("Enter the NUMBER of the DATA file you want to run: ");
        int d = reader.nextInt();

        String dataInfo = "Data/TrainData" + d + ".txt";
        String labelInfo = "Data/TrainLabel" + d + ".txt";
        String testInfo = "Data/TestData" + d + ".txt";


        if(f == 1) {
            if (d == 2 || d == 5) {
                System.out.println(dataInfo);
                System.out.println(labelInfo);
                KNN dirtyData = new KNN(dataInfo, "Data/temp.txt", 2);
                cleanedData = dirtyData.getOutputFile();
            } else if (d == 1) {
                System.out.println("*********** This is a very large data set and can take as much as 2 minutes to run! ************");
                System.out.println(dataInfo);
                System.out.println(labelInfo);
                imputerRequest = 1;
                cleanedData = dataInfo;
            } else if (d == 3) {
                System.out.println(dataInfo);
                System.out.println(labelInfo);
                KNN knn = new KNN(dataInfo, "Data/temp.txt", testInfo, labelInfo, 2, 2693);
                System.out.println("\nYour results are posted in the Data/Answers.txt file!");
                System.out.println("\nDone");
                System.exit(1);

            } else if (d == 4) {
                System.out.println(dataInfo);
                System.out.println(labelInfo);
                KNN knn = new KNN(dataInfo, "Data/temp.txt", testInfo, labelInfo, 2, 1092);
                System.out.println("\nYour results are posted in the Data/Answers.txt file!");
                System.out.println("\nDone");
                System.exit(1);

            } else {
                System.out.println(" You must enter a value between 1 and 5!!");
                System.exit(1);
            }
        } else if(f == 2) {
            if(d == 1) {
                System.out.println("Data/MissingData1.txt");
                KNN knn = new KNN("Data/MissingData1.txt", "Data/Answers.txt", 2);
                System.out.println("Your results are posted in the Data/Answers.txt file!");
                System.out.println("\nDone");
                System.exit(1);
            } else if(d == 2) {
                System.out.println("Data/MissingData2.txt");
                KNN knn = new KNN("Data/MissingData2.txt", "Data/Answers.txt", 2);
                System.out.println("Your results are posted in the Data/Answers.txt file!");
                System.out.println("\nDone");
                System.exit(1);
            } else {
                System.out.println(" You must enter a 1 or a 2 for Missing Data Valuation!!");
                System.exit(1);
            }

        }


        //System.out.println("Output: " + cleanedData);

        LinearRegressionML lr = new LinearRegressionML(cleanedData, labelInfo, testInfo,imputerRequest);
        lr.dataDivider(lr.readData(lr.dataFile));
        lr.getLabels();


        // get the actual features, meanwhile add a N*1 column vector with value being all 1 as the first column of the features
        Matrix trainingData = lr.biasInsertion(lr.trainingMartrix);
        Matrix trainLabels = lr.trainingLabelMatrix;
        Matrix testingData = lr.biasInsertion(lr.testingMatrix);
        Matrix testLabels = lr.testingLabelMatrix;

        /*System.out.println("Modified Dimensions for training data: " + trainingData.getRowDimension() + " X " + trainingData.getColumnDimension());
        System.out.println("Modified Dimensions for testing data: " + testingData.getRowDimension() + " X " + testingData.getColumnDimension());
        System.out.println("Training Labels Dimension: " + trainLabels.getRowDimension() + " X " + trainLabels.getColumnDimension());
        System.out.println("Testing Labels Dimension: " + testLabels.getRowDimension() + " X " + testLabels.getColumnDimension() + "\n");*/

        //Train the model
        Matrix weights = lr.trainLinearRegressionModel(trainingData, trainLabels);
        lr.applyPredictions();
        for (int i = 0; i < weights.getRowDimension(); i++) {
            System.out.println("Weight " + i + " : " + weights.get(i, 0));
        }

        //Compare model to testing set
        double training_error = lr.evaluateModel(trainingData, trainLabels, weights);
        System.out.printf("\nTraining Evaluation Percentage %.2f" , training_error * 100);
        System.out.print("%");

        double testing_error = lr.evaluateModel(testingData, testLabels, weights);
        System.out.printf("\nTesting Evaluation Percentage %.2f",testing_error * 100 );
        System.out.print("%");




        System.out.println("\n\nYour results are posted in the Data/Answers.txt file!");
        System.out.println("Done");

    }

}
