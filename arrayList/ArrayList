package arraylist;


/**
 * 1) Program Purpose
 *      This program recreates the functionality of the ArrayList in the 
 *      java library.
 * 2) Solution and Algorithms
 *      My solution involved breaking the tasks down to very individualized
 *      methods. The main function primarily holds test cases for the ArrayList.
 *      All algorithms used where custom. 
 * 3) Data Structures
 *      The only data structure used was an Array.
 * 4) Program description and input/output
 *      This program creates an Array that automatically increases in size
 *      once a request is received to add a value into the last array element.
 * 5) Class Purpose
 *      The ArrayList class holds the utilities used to recreate the ArrayList 
 *      functionality. The testarray class only holds the tests for the 
 *      ArrayList class.
 *
 * @author kevin Seveur
 * 9/26/2017
 * @author kevinseveur
 */
 
 
 
public class ArrayList {
    
    public Object [] array;
    public int sizeMult1 = 0;//Controls array increase size
    public int sizeMult2 = 0;//Controls array increase size
    
    /**
     * Default constructor
     */
    public ArrayList() {
    // Default constructor
    //Create an arrayList with a default size of 10
    array = new Object[10];
    sizeMult1 = 10;
    }
    
    /**
     * Secondary constructor
     * @param n 
     */
    public ArrayList(int n) {
        // Constructor that accepts an int that says the arraylist size
        array = new Object[n];
        sizeMult2 = n;
    }
    
    /**
     * Precondition: array has been constructed
     * Postcondition: the value x is added to the first null element in array
     * @param x 
     */
    public void add(Object x) {
        // A method that allows you to place a value at the end of the ArrayList
        for (int i = 0; i < array.length; i++) {
            if (i == array.length - 1) {
                upSize();
            }
            if (array[i] == null) {
                array[i] = x;
                System.out.println("Value added: " + array[i]);
                return;
            }
        }
        
    }
    
    /**
     * Precondition: array has been constructed
     * Postcondition: the value x is added to the location in array specified
     * by the index parameter
     * @param index
     * @param x 
     */
    public void add(int index, Object x) {
        //A method that allows you to place a value at a given location
      if (index == array.length-1) {
          upSize();
      }
      
      if (index < 0) {
          System.out.println("You have specified an improper location value");
      } else {
          array[index] = x;
      }  
      System.out.println("Value added: " + array[index]);
    }
    
    /**
     * Precondition: Array is constructed
     * Postcondition: Method returns the value in element specified by index. 
     * If index is negative or out of bounds, an error is returned to user.
     * @param index
     * @return 
     */
    public Object get(int index) {
        //A method that allows you to retrieve a value from a given location
        if (index < 0 || index >= array.length) {
          System.out.println("You have specified an improper location value");
          System.exit(0);
      } 
        return array[index]; 
    }
    
    /**
     * Precondition: Array is built.
     * Postcondition: returns the length of the array starting at 1 (not 0).
     * @return 
     */
    public int size() {
        //A method that allows you the number of elements in the the ArrayList
        return array.length;
    }
    
    /**
     * Precondition: Array is constructed.
     * Postcondition: Method returns true if all elements in array are null and 
     * false if any element has a non-null value in it.
     * @return 
     */
    public boolean isEmpty() {
        //A method would test to see if the ArrayList is empty
        for (Object obj: array) {
            if (obj != null) {
                return false;
            }
        }
        return true;
    }
    
    /**
     * Precondition: Array is constructed.
     * Postcondition: Returns true if the ob value is contained in the array. 
     * A false is returned if the ob value is not found.
     * @param ob
     * @return 
     */
    public boolean isIn(Object ob) {
        //A method that see if a particular object exist in the ArrayList
        for (int i = 0 ; i < array.length-1 ; i++) {
           if (array[i] == ob) {
               return true; 
           }
        }
        return false;
    }
    
    /**
     * Precondition: Array is constructed.
     * Postcondition: Returns the element where the value of n is located. If 
     * n is not in the array, a notification is sent to the user.
     * @param n
     * @return 
     */
    public int find (Object n) {
        //A method that will return the location of first occurrence of an 
        //Object starting from location 0
        int index = 0;
 
        if (!isIn(n)) {
            System.out.println("The value " + n + " is not in the array!");
            return -1;
        } else {
            while (array[index] != n) {
                index++;      
            }
        }
        return index;
    }

    /**
     * Precondition: Array is constructed.
     * Postcondition: Locates the element where n is located and replaces n
     * with null. If n is not in the array an error message is sent to user.
     * @param n 
     */
    public void remove(Object n) {
        //A method that will remove the first occurrence of an 
        //Object starting from location 0
        if (!isIn(n)) {
            System.out.print(n + " is not in this array!");
            return;
        }
        int element = this.find(n);
        System.out.println("Value removed: " + array[element]);
        array[element] = null;

    }
    
    /**
     * Postcondition: Increases the size of the element dependent on the
     * constructor used to create the array.
     */
    private void upSize() {
        // increase the size of the array
        int index = 0;
        if (sizeMult1 != 0) {
            Object [] newArray = new Object[array.length + sizeMult1];
            for (Object ob1 : array) {
                newArray[index] = array[index];
                index++;
            }
            array = newArray; 
        } else {
            Object [] newArray = new Object[sizeMult2 * 2];
            for (Object ob1 : array) {
                newArray[index] = array[index];
                index++;
            }
            sizeMult2 *= 2;
            array = newArray; 
        }
    }
    
    /**
     * Precondition: Array is constructed.
     * Postcondition: Converts the values of the array to a string and
     * prints them out to screen.
     */
    public void toArray() {
        System.out.print("[ ");
        for (Object obj : array) {
            System.out.print(obj + " ");
        }
        System.out.print("]");
    }
    
    
}
